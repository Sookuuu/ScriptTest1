-- LocalScript: Painel de Testes com ESP, TeamCheck e Infinite Jump
-- Uso educativo / Studio / Testes autorizados
-- Funcionalidades: Drag, Minimizar, Close, Infinite Jump, ESP atualizado, Refresh ESP

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CollectionService = game:GetService("CollectionService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local camera = workspace.CurrentCamera

local originalFOV = camera and camera.FieldOfView or 70
local connections = {}
local highlightMap = {} -- [instance] = Highlight
local espMap = {} -- [player] = Highlight
local dragging = false
local menuOpen = true
local infiniteJumpEnabled = false
local highlightsEnabled = false

-- ===== Funções ESP =====
local function createESPFor(p)
    if espMap[p] then return end
    local char = p.Character
    if not char then return end
    local root = char:FindFirstChild("HumanoidRootPart")
    if not root then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_"..p.Name
    highlight.Adornee = char
    highlight.FillTransparency = 0.6
    highlight.OutlineTransparency = 0.3
    highlight.Parent = playerGui

    -- Cor do time
    if p.Team and p.Team.TeamColor then
        highlight.FillColor = p.Team.TeamColor.Color
        highlight.OutlineColor = p.Team.TeamColor.Color
    else
        highlight.FillColor = Color3.fromRGB(255,0,0)
        highlight.OutlineColor = Color3.fromRGB(255,0,0)
    end
    espMap[p] = highlight
end

local function removeESPFor(p)
    local h = espMap[p]
    if h then
        pcall(function() h:Destroy() end)
        espMap[p] = nil
    end
end

local function refreshESP()
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= player then
            createESPFor(p)
        end
    end
    for p, h in pairs(espMap) do
        if not p.Parent then removeESPFor(p) end
    end
end

-- Atualiza quando jogador entra, sai ou respawna
table.insert(connections, Players.PlayerAdded:Connect(function(p)
    createESPFor(p)
    table.insert(connections, p.CharacterAdded:Connect(function()
        removeESPFor(p)
        createESPFor(p)
    end))
end))

table.insert(connections, Players.PlayerRemoving:Connect(function(p)
    removeESPFor(p)
end))

-- Inicializa ESP para jogadores já existentes
refreshESP()

-- ===== UI =====
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DebugCustomUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 420, 0, 220)
mainFrame.Position = UDim2.new(0.5, -210, 0.5, -110)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = Color3.fromRGB(35,35,35)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0,8)

-- Título
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -16, 0, 28)
title.Position = UDim2.new(0, 8, 0, 8)
title.BackgroundTransparency = 1
title.Text = "Painel de Testes"
title.TextColor3 = Color3.fromRGB(240,240,240)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 18
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = mainFrame

-- Botão Fechar
local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, 36, 0, 24)
closeBtn.Position = UDim2.new(1, -44, 0, 8)
closeBtn.BackgroundColor3 = Color3.fromRGB(200,60,60)
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.new(1,1,1)
closeBtn.Font = Enum.Font.SourceSansBold
closeBtn.TextSize = 18
closeBtn.Parent = mainFrame
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0,6)

-- Botão Drag
local dragBtn = Instance.new("TextButton")
dragBtn.Size = UDim2.new(0, 28, 0, 28)
dragBtn.Position = UDim2.new(1, -80, 0, 8)
dragBtn.BackgroundColor3 = Color3.fromRGB(100,100,100)
dragBtn.Text = "⇅"
dragBtn.TextColor3 = Color3.new(1,1,1)
dragBtn.Font = Enum.Font.SourceSansBold
dragBtn.TextSize = 18
dragBtn.Parent = mainFrame
Instance.new("UICorner", dragBtn).CornerRadius = UDim.new(0,6)

-- Botão Refresh ESP
local refreshBtn = Instance.new("TextButton")
refreshBtn.Size = UDim2.new(0, 100, 0, 28)
refreshBtn.Position = UDim2.new(0, 12, 0, 48)
refreshBtn.BackgroundColor3 = Color3.fromRGB(80,80,200)
refreshBtn.Text = "Refresh ESP"
refreshBtn.TextColor3 = Color3.new(1,1,1)
refreshBtn.Font = Enum.Font.SourceSansBold
refreshBtn.TextSize = 14
refreshBtn.Parent = mainFrame
Instance.new("UICorner", refreshBtn).CornerRadius = UDim.new(0,6)
table.insert(connections, refreshBtn.MouseButton1Click:Connect(refreshESP))

-- Infinite Jump Toggle
local ijToggle = Instance.new("TextButton")
ijToggle.Size = UDim2.new(0, 120, 0, 28)
ijToggle.Position = UDim2.new(0, 12, 0, 88)
ijToggle.BackgroundColor3 = Color3.fromRGB(90,90,90)
ijToggle.Text = "Infinite Jump: Off"
ijToggle.TextColor3 = Color3.fromRGB(240,240,240)
ijToggle.Font = Enum.Font.SourceSansBold
ijToggle.TextSize = 14
ijToggle.Parent = mainFrame
Instance.new("UICorner", ijToggle).CornerRadius = UDim.new(0,6)

table.insert(connections, ijToggle.MouseButton1Click:Connect(function()
    infiniteJumpEnabled = not infiniteJumpEnabled
    ijToggle.Text = "Infinite Jump: "..(infiniteJumpEnabled and "On" or "Off")
    ijToggle.BackgroundColor3 = infiniteJumpEnabled and Color3.fromRGB(80,160,80) or Color3.fromRGB(90,90,90)
end))

-- Infinite Jump Handler
table.insert(connections, UserInputService.JumpRequest:Connect(function()
    if not infiniteJumpEnabled then return end
    local char = player.Character
    if not char then return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid and humanoid.Health > 0 then
        pcall(function() humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end)
    end
end))

-- ===== Drag =====
local draggingMenu = false
local dragOffset = Vector2.new(0,0)
dragBtn.MouseButton1Down:Connect(function(input)
    draggingMenu = true
    dragOffset = Vector2.new(input.Position.X - mainFrame.AbsolutePosition.X, input.Position.Y - mainFrame.AbsolutePosition.Y)
end)
UserInputService.InputChanged:Connect(function(input)
    if draggingMenu and input.UserInputType == Enum.UserInputType.MouseMovement then
        mainFrame.Position = UDim2.new(0, input.Position.X - dragOffset.X, 0, input.Position.Y - dragOffset.Y)
    end
end)
UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingMenu = false
    end
end)

-- ===== Minimizar / Abrir com M =====
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.M then
        menuOpen = not menuOpen
        mainFrame.Visible = menuOpen
    end
end)

-- ===== Close / Cleanup =====
local function cleanup()
    for _, con in ipairs(connections) do
        if con and typeof(con) == "RBXScriptConnection" then
            pcall(function() con:Disconnect() end)
        end
    end
    connections = {}
    for p, h in pairs(espMap) do
        removeESPFor(p)
    end
    for inst, h in pairs(highlightMap) do
        pcall(function() h:Destroy() end)
    end
    espMap = {}
    highlightMap = {}
    pcall(function() screenGui:Destroy() end)
end
closeBtn.MouseButton1Click:Connect(cleanup)

print("[DebugCustomUI] Script carregado com ESP, TeamCheck e Infinite Jump.")
