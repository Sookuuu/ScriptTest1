-- LocalScript para uso educativo / testes locais (colocar em StarterPlayerScripts)
-- Inclui:
--  - Interface com botão de fechar (limpa tudo e restaura FOV)
--  - Slider para ajustar FOV
--  - Toggle "Highlight Tagged" (CollectionService tag "DebugHighlight")
--  - Toggle "Infinite Jump" (SOMENTE NO STUDIO)
--  - ESP para jogadores com cor do time (Team Color) + Team Check
-- Observação: projetado para uso em Studio / ambiente autorizado.

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CollectionService = game:GetService("CollectionService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local camera = workspace.CurrentCamera

local IS_STUDIO = RunService:IsStudio()
local originalFOV = camera and camera.FieldOfView or 70

local connections = {}              -- lista de RBXScriptConnections p/ desconectar
local tagHighlightMap = {}         -- [instance] = highlightInstance (para DebugHighlight)
local playerHighlightMap = {}      -- [player] = highlightInstance (para ESP)

local dragging = false
local infiniteJumpEnabled = false
local highlightsEnabled = false
local espEnabled = false
local teamCheckEnabled = true      -- se true, só mostra inimigos (outro time), se false mostra todos exceto você

local function addConn(conn)
    if conn then table.insert(connections, conn) end
end

-- ========== Highlight para instâncias taggeadas ==========
local function createHighlightForTag(inst)
    if not inst or tagHighlightMap[inst] then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "DebugHighlightInstance"
    highlight.Adornee = inst
    highlight.FillColor = Color3.fromRGB(255, 200, 60)
    highlight.FillTransparency = 0.6
    highlight.OutlineColor = Color3.fromRGB(255, 150, 0)
    highlight.OutlineTransparency = 0.3
    highlight.Parent = playerGui
    tagHighlightMap[inst] = highlight
end

local function removeHighlightForTag(inst)
    local h = tagHighlightMap[inst]
    if h then
        pcall(function() h:Destroy() end)
        tagHighlightMap[inst] = nil
    end
end

local function refreshTaggedHighlights()
    for inst, _ in pairs(tagHighlightMap) do
        if not inst or not CollectionService:HasTag(inst, "DebugHighlight") then
            removeHighlightForTag(inst)
        end
    end
    for _, inst in ipairs(CollectionService:GetTagged("DebugHighlight")) do
        createHighlightForTag(inst)
    end
end

-- ========== ESP de jogadores ==========
local function getTeamColorOfPlayer(plr)
    if not plr then return Color3.fromRGB(255,255,255) end
    local tc = plr.TeamColor
    if tc and tc ~= BrickColor.new("") then return tc.Color end
    if plr.Team and plr.Team.TeamColor then return plr.Team.TeamColor.Color end
    return Color3.fromRGB(255,255,255)
end

local function shouldShowPlayer(plr)
    if plr == player then return false end
    if not plr.Character then return false end
    if not espEnabled then return false end
    if teamCheckEnabled and player.Team and plr.Team == player.Team then
        return false
    end
    return true
end

local function createOrUpdatePlayerHighlight(plr)
    if not plr or not plr.Character then return end
    local color = getTeamColorOfPlayer(plr)
    local h = playerHighlightMap[plr]
    if h and h.Parent then
        h.FillColor = color
        h.OutlineColor = color:lerp(Color3.new(0,0,0), 0.5)
        return
    end
    local highlight = Instance.new("Highlight")
    highlight.Name = "ESPPlayerHighlight"
    highlight.Adornee = plr.Character
    highlight.FillColor = color
    highlight.FillTransparency = 0.7
    highlight.OutlineColor = color:lerp(Color3.new(0,0,0), 0.45)
    highlight.OutlineTransparency = 0.25
    highlight.Parent = playerGui
    playerHighlightMap[plr] = highlight

    local remConn
    remConn = plr.CharacterRemoving:Connect(function()
        removePlayerHighlight(plr)
        if remConn then remConn:Disconnect() end
    end)
    addConn(remConn)
end

local function removePlayerHighlight(plr)
    local h = playerHighlightMap[plr]
    if h then
        pcall(function() h:Destroy() end)
        playerHighlightMap[plr] = nil
    end
end

local function updateAllPlayerHighlights()
    for _, plr in pairs(Players:GetPlayers()) do
        if shouldShowPlayer(plr) then
            createOrUpdatePlayerHighlight(plr)
        else
            removePlayerHighlight(plr)
        end
    end
end

local function onPlayerTeamChanged(plr)
    if not plr then return end
    if playerHighlightMap[plr] then
        if teamCheckEnabled and player.Team and plr.Team == player.Team then
            removePlayerHighlight(plr)
        else
            createOrUpdatePlayerHighlight(plr)
        end
    else
        if shouldShowPlayer(plr) then createOrUpdatePlayerHighlight(plr) end
    end
end

-- ========== UI ==========
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DebugCustomUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 420, 0, 220)
mainFrame.Position = UDim2.new(0.5, -210, 0.5, -110)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0,8)

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -16, 0, 28)
title.Position = UDim2.new(0, 8, 0, 8)
title.BackgroundTransparency = 1
title.Text = "Painel de Testes (local / Studio)"
title.TextColor3 = Color3.fromRGB(240, 240, 240)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 18
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = mainFrame

local closeBtn = Instance.new("TextButton")
closeBtn.Name = "CloseButton"
closeBtn.Size = UDim2.new(0, 36, 0, 24)
closeBtn.Position = UDim2.new(1, -44, 0, 8)
closeBtn.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.new(1,1,1)
closeBtn.Font = Enum.Font.SourceSansBold
closeBtn.TextSize = 18
closeBtn.Parent = mainFrame
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0,6)

-- FOV slider
local fovLabel = Instance.new("TextLabel")
fovLabel.Size = UDim2.new(0, 200, 0, 22)
fovLabel.Position = UDim2.new(0, 12, 0, 48)
fovLabel.BackgroundTransparency = 1
fovLabel.Text = "FOV: " .. tostring(math.floor(originalFOV))
fovLabel.TextColor3 = Color3.fromRGB(220,220,220)
fovLabel.Font = Enum.Font.SourceSans
fovLabel.TextSize = 16
fovLabel.TextXAlignment = Enum.TextXAlignment.Left
fovLabel.Parent = mainFrame

local sliderTrack = Instance.new("Frame")
sliderTrack.Name = "SliderTrack"
sliderTrack.Size = UDim2.new(0, 320, 0, 10)
sliderTrack.Position = UDim2.new(0, 12, 0, 76)
sliderTrack.BackgroundColor3 = Color3.fromRGB(50,50,50)
sliderTrack.Parent = mainFrame
Instance.new("UICorner", sliderTrack).CornerRadius = UDim.new(1,0)

local sliderFill = Instance.new("Frame")
sliderFill.Name = "SliderFill"
sliderFill.Size = UDim2.new((originalFOV - 10) / (120 - 10), 0, 1, 0)
sliderFill.Position = UDim2.new(0, 0, 0, 0)
sliderFill.BackgroundColor3 = Color3.fromRGB(80,160,255)
sliderFill.Parent = sliderTrack
Instance.new("UICorner", sliderFill).CornerRadius = UDim.new(1,0)

local sliderKnob = Instance.new("ImageButton")
sliderKnob.Name = "Knob"
sliderKnob.Size = UDim2.new(0, 18, 0, 18)
sliderKnob.Position = UDim2.new(sliderFill.Size.X.Scale, 0, 0.5, -9)
sliderKnob.Image = ""
sliderKnob.BackgroundColor3 = Color3.fromRGB(245,245,245)
sliderKnob.Parent = sliderTrack
Instance.new("UICorner", sliderKnob).CornerRadius = UDim.new(1,0)

-- Infinite Jump
local ijLabel = Instance.new("TextLabel")
ijLabel.Size = UDim2.new(0, 220, 0, 22)
ijLabel.Position = UDim2.new(0, 12, 0, 104)
ijLabel.BackgroundTransparency = 1
ijLabel.Text = "Infinite Jump (Studio only):"
ijLabel.TextColor3 = Color3.fromRGB(220,220,220)
ijLabel.Font = Enum.Font.SourceSans
ijLabel.TextSize = 16
ijLabel.TextXAlignment = Enum.TextXAlignment.Left
ijLabel.Parent = mainFrame

local ijToggle = Instance.new("TextButton")
ijToggle.Name = "IJToggle"
ijToggle.Size = UDim2.new(0, 60, 0, 24)
ijToggle.Position = UDim2.new(0, 240, 0, 100)
ijToggle.Text = "Off"
ijToggle.BackgroundColor3 = Color3.fromRGB(90,90,90)
ijToggle.TextColor3 = Color3.fromRGB(240,240,240)
ijToggle.Font = Enum.Font.SourceSansBold
ijToggle.TextSize = 14
ijToggle.Parent = mainFrame
Instance.new("UICorner", ijToggle).CornerRadius = UDim.new(0,6)

local studioWarning = Instance.new("TextLabel")
studioWarning.Size = UDim2.new(1, -16, 0, 18)
studioWarning.Position = UDim2.new(0, 8, 1, -28)
studioWarning.BackgroundTransparency = 1
studioWarning.Text = IS_STUDIO and "Rodando no Studio" or "Aviso: Infinite Jump só funciona no Studio para segurança."
studioWarning.TextColor3 = Color3.fromRGB(200,200,120)
studioWarning.Font = Enum.Font.SourceSansItalic
studioWarning.TextSize = 12
studioWarning.TextXAlignment = Enum.TextXAlignment.Left
studioWarning.Parent = mainFrame

-- Highlight toggle
local hlLabel = Instance.new("TextLabel")
hlLabel.Size = UDim2.new(0, 220, 0, 22)
hlLabel.Position = UDim2.new(0, 12, 0, 136)
hlLabel.BackgroundTransparency = 1
hlLabel.Text = "Highlight (tag: DebugHighlight):"
hlLabel.TextColor3 = Color3.fromRGB(220,220,220)
hlLabel.Font = Enum.Font.SourceSans
hlLabel.TextSize = 16
hlLabel.TextXAlignment = Enum.TextXAlignment.Left
hlLabel.Parent = mainFrame

local hlToggle = Instance.new("TextButton")
hlToggle.Name = "HLToggle"
hlToggle.Size = UDim2.new(0, 60, 0, 24)
hlToggle.Position = UDim2.new(0, 240, 0, 132)
hlToggle.Text = "Off"
hlToggle.BackgroundColor3 = Color3.fromRGB(90,90,90)
hlToggle.TextColor3 = Color3.fromRGB(240,240,240)
hlToggle.Font = Enum.Font.SourceSansBold
hlToggle.TextSize = 14
hlToggle.Parent = mainFrame
Instance.new("UICorner", hlToggle).CornerRadius = UDim.new(0,6)

-- ESP toggles
local espLabel = Instance.new("TextLabel")
espLabel.Size = UDim2.new(0, 220, 0, 22)
espLabel.Position = UDim2.new(0, 12, 0, 168)
espLabel.BackgroundTransparency = 1
espLabel.Text = "ESP (Players) :"
espLabel.TextColor3 = Color3.fromRGB(220,220,220)
espLabel.Font = Enum.Font.SourceSans
espLabel.TextSize = 16
espLabel.TextXAlignment = Enum.TextXAlignment.Left
espLabel.Parent = mainFrame

local espToggle = Instance.new("TextButton")
espToggle.Name = "ESPToggle"
espToggle.Size = UDim2.new(0, 60, 0, 24)
espToggle.Position = UDim2.new(0, 240, 0, 164)
espToggle.Text = "Off"
espToggle.BackgroundColor3 = Color3.fromRGB(90,90,90)
espToggle.TextColor3 = Color3.fromRGB(240,240,240)
espToggle.Font = Enum.Font.SourceSansBold
espToggle.TextSize = 14
espToggle.Parent = mainFrame
Instance.new("UICorner", espToggle).CornerRadius = UDim.new(0,6)

local teamCheckLabel = Instance.new("TextLabel")
teamCheckLabel.Size = UDim2.new(0, 160, 0, 18)
teamCheckLabel.Position = UDim2.new(0, 308, 0, 168)
teamCheckLabel.BackgroundTransparency = 1
teamCheckLabel.Text = "TeamCheck: On"
teamCheckLabel.TextColor3 = Color3.fromRGB(200,200,200)
teamCheckLabel.Font = Enum.Font.SourceSans
teamCheckLabel.TextSize = 14
teamCheckLabel.TextXAlignment = Enum.TextXAlignment.Left
teamCheckLabel.Parent = mainFrame

-- Slider inicial
do
    local minFOV, maxFOV = 10, 120
    local percent = math.clamp((camera.FieldOfView - minFOV) / (maxFOV - minFOV), 0, 1)
    local function setFOVFromPercent(percent)
        percent = math.clamp(percent, 0, 1)
        local value = minFOV + (maxFOV - minFOV) * percent
        camera.FieldOfView = value
        fovLabel.Text = "FOV: " .. tostring(math.floor(value))
        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        sliderKnob.Position = UDim2.new(percent, 0, 0.5, -9)
    end
    setFOVFromPercent(percent)
end

local function getSliderPercentFromPosition(absX)
    local trackPos = sliderTrack.AbsolutePosition.X
    local trackWidth = sliderTrack.AbsoluteSize.X
    local t = (absX - trackPos) / trackWidth
    return math.clamp(t, 0, 1)
end

addConn(sliderKnob.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end))

addConn(UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local percent = getSliderPercentFromPosition(input.Position.X)
        local minFOV, maxFOV = 10, 120
        local value = minFOV + (maxFOV - minFOV) * percent
        camera.FieldOfView = value
        fovLabel.Text = "FOV: " .. tostring(math.floor(value))
        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        sliderKnob.Position = UDim2.new(percent, 0, 0.5, -9)
    end
end))

addConn(UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end))

-- Infinite Jump
addConn(ijToggle.MouseButton1Click:Connect(function()
    if not IS_STUDIO then
        ijToggle.Text = "Off"
        infiniteJumpEnabled = false
        studioWarning.Text = "Aviso: Infinite Jump só funciona no Studio para segurança."
        ijToggle.BackgroundColor3 = Color3.fromRGB(90,90,90)
        return
    end
    infiniteJumpEnabled = not infiniteJumpEnabled
    ijToggle.Text = infiniteJumpEnabled and "On" or "Off"
    ijToggle.BackgroundColor3 = infiniteJumpEnabled and Color3.fromRGB(80,160,80) or Color3.fromRGB(90,90,90)
end))

addConn(UserInputService.JumpRequest:Connect(function()
    if not infiniteJumpEnabled then return end
    local char = player.Character
    if not char then return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid and humanoid.Health > 0 then
        pcall(function() humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end)
    end
end))

-- Highlight toggle
local tagAddedConn, tagRemovedConn
local function enableHighlights()
    highlightsEnabled = true
    hlToggle.Text = "On"
    hlToggle.BackgroundColor3 = Color3.fromRGB(80,160,80)
    refreshTaggedHighlights()
    tagAddedConn = CollectionService:GetInstanceAddedSignal
