-- LocalScript unificado com ESP otimizado, Infinite Jump Studio-only, highlights por tag e FOV slider

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CollectionService = game:GetService("CollectionService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local camera = workspace.CurrentCamera
local IS_STUDIO = RunService:IsStudio()
local originalFOV = camera and camera.FieldOfView or 70

local connections, tagHighlightMap, playerHighlightMap = {}, {}, {}
local dragging, infiniteJumpEnabled, highlightsEnabled, espEnabled = false, false, false, false
local teamCheckEnabled = true

local function addConn(conn) if conn then table.insert(connections, conn) end end

-- ========== Highlights para tags ==========
local function createHighlight(inst, color, map)
    if not inst or map[inst] then return end
    local h = Instance.new("Highlight")
    h.Name = "DebugHighlightInstance"
    h.Adornee = inst
    h.FillColor = color
    h.FillTransparency = 0.6
    h.OutlineColor = color:lerp(Color3.new(0,0,0), 0.5)
    h.OutlineTransparency = 0.3
    h.Parent = playerGui
    map[inst] = h
end

local function removeHighlight(inst, map)
    local h = map[inst]
    if h then pcall(function() h:Destroy() end) map[inst] = nil end
end

local function refreshTaggedHighlights()
    for inst,_ in pairs(tagHighlightMap) do
        if not inst or not CollectionService:HasTag(inst, "DebugHighlight") then
            removeHighlight(inst, tagHighlightMap)
        end
    end
    for _, inst in ipairs(CollectionService:GetTagged("DebugHighlight")) do
        createHighlight(inst, Color3.fromRGB(255,200,60), tagHighlightMap)
    end
end

-- ========== ESP de jogadores ==========
local function getTeamColor(plr)
    local tc = plr.TeamColor
    if tc and tc ~= BrickColor.new("") then return tc.Color end
    if plr.Team and plr.Team.TeamColor then return plr.Team.TeamColor.Color end
    return Color3.fromRGB(255,255,255)
end

local function shouldShowPlayer(plr)
    return plr ~= player and plr.Character and espEnabled and (not teamCheckEnabled or not (player.Team and plr.Team == player.Team))
end

local function createOrUpdatePlayerHighlight(plr)
    if not plr or not plr.Character then return end
    local color = getTeamColor(plr)
    local h = playerHighlightMap[plr]
    if h and h.Parent then
        h.FillColor = color
        h.OutlineColor = color:lerp(Color3.new(0,0,0),0.5)
        return
    end
    h = Instance.new("Highlight")
    h.Name = "ESPPlayerHighlight"
    h.Adornee = plr.Character
    h.FillColor = color
    h.FillTransparency = 0.7
    h.OutlineColor = color:lerp(Color3.new(0,0,0),0.45)
    h.OutlineTransparency = 0.25
    h.Parent = playerGui
    playerHighlightMap[plr] = h
    local remConn
    remConn = plr.CharacterRemoving:Connect(function()
        removeHighlight(plr, playerHighlightMap)
        if remConn then remConn:Disconnect() end
    end)
    addConn(remConn)
end

local function updateAllPlayerHighlights()
    for _, plr in pairs(Players:GetPlayers()) do
        if shouldShowPlayer(plr) then createOrUpdatePlayerHighlight(plr) else removeHighlight(plr, playerHighlightMap) end
    end
end

local function onPlayerTeamChanged(plr)
    if playerHighlightMap[plr] then
        if teamCheckEnabled and player.Team and plr.Team == player.Team then removeHighlight(plr, playerHighlightMap) else createOrUpdatePlayerHighlight(plr) end
    elseif shouldShowPlayer(plr) then
        createOrUpdatePlayerHighlight(plr)
    end
end

-- ========== UI ==========
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DebugCustomUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Name, mainFrame.Size, mainFrame.Position, mainFrame.AnchorPoint = "MainFrame", UDim2.new(0,420,0,220), UDim2.new(0.5,-210,0.5,-110), Vector2.new(0.5,0.5)
mainFrame.BackgroundColor3, mainFrame.BorderSizePixel = Color3.fromRGB(30,30,30), 0
mainFrame.Parent = screenGui
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0,8)

local function createLabel(text,posX,posY,sizeX,sizeY,fontSize)
    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(0,sizeX,0,sizeY)
    lbl.Position = UDim2.new(0,posX,0,posY)
    lbl.BackgroundTransparency = 1
    lbl.Text, lbl.TextColor3, lbl.Font, lbl.TextSize, lbl.TextXAlignment = text, Color3.fromRGB(220,220,220), Enum.Font.SourceSans, fontSize, Enum.TextXAlignment.Left
    lbl.Parent = mainFrame
    return lbl
end

local fovLabel = createLabel("FOV: "..tostring(math.floor(originalFOV)),12,48,200,22,16)
local ijLabel = createLabel("Infinite Jump (Studio only):",12,104,220,22,16)
local hlLabel = createLabel("Highlight (tag: DebugHighlight):",12,136,220,22,16)
local espLabel = createLabel("ESP (Players) :",12,168,220,22,16)
local teamCheckLabel = createLabel("TeamCheck: On",308,168,160,18,14)

-- Close Button
local closeBtn = Instance.new("TextButton")
closeBtn.Size, closeBtn.Position, closeBtn.Text, closeBtn.Font, closeBtn.TextSize, closeBtn.BackgroundColor3 = UDim2.new(0,36,0,24), UDim2.new(1,-44,0,8), "X", Enum.Font.SourceSansBold, 18, Color3.fromRGB(200,60,60)
closeBtn.TextColor3, closeBtn.Parent = Color3.new(1,1,1), mainFrame
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0,6)

-- FOV Slider
local sliderTrack = Instance.new("Frame")
sliderTrack.Size, sliderTrack.Position, sliderTrack.BackgroundColor3 = UDim2.new(0,320,0,10), UDim2.new(0,12,0,76), Color3.fromRGB(50,50,50)
sliderTrack.Parent = mainFrame
Instance.new("UICorner", sliderTrack).CornerRadius = UDim.new(1,0)
local sliderFill = Instance.new("Frame")
sliderFill.Size, sliderFill.Position, sliderFill.BackgroundColor3 = UDim2.new((originalFOV-10)/(120-10),0,1,0), UDim2.new(0,0,0,0), Color3.fromRGB(80,160,255)
sliderFill.Parent = sliderTrack
Instance.new("UICorner", sliderFill).CornerRadius = UDim.new(1,0)
local sliderKnob = Instance.new("ImageButton")
sliderKnob.Size, sliderKnob.Position, sliderKnob.BackgroundColor3, sliderKnob.Image = UDim2.new(0,18,0,18), UDim2.new(sliderFill.Size.X.Scale,0,0.5,-9), Color3.fromRGB(245,245,245), ""
sliderKnob.Parent = sliderTrack
Instance.new("UICorner", sliderKnob).CornerRadius = UDim.new(1,0)

-- Infinite Jump Toggle
local ijToggle = Instance.new("TextButton")
ijToggle.Size, ijToggle.Position, ijToggle.Text, ijToggle.Font, ijToggle.TextSize, ijToggle.BackgroundColor3 = UDim2.new(0,60,0,24), UDim2.new(0,240,0,100), "Off", Enum.Font.SourceSansBold, 14, Color3.fromRGB(90,90,90)
ijToggle.TextColor3, ijToggle.Parent = Color3.fromRGB(240,240,240), mainFrame

-- Highlight Toggle
local hlToggle = Instance.new("TextButton")
hlToggle.Size, hlToggle.Position, hlToggle.Text, hlToggle.Font, hlToggle.TextSize, hlToggle.BackgroundColor3 = UDim2.new(0,60,0,24), UDim2.new(0,240,0,132), "Off", Enum.Font.SourceSansBold, 14, Color3.fromRGB(90,90,90)
hlToggle.TextColor3, hlToggle.Parent = Color3.fromRGB(240,240,240), mainFrame

-- ESP Toggle
local espToggle = Instance.new("TextButton")
espToggle.Size, espToggle.Position, espToggle.Text, espToggle.Font, espToggle.TextSize, espToggle.BackgroundColor3 = UDim2.new(0,60,0,24), UDim2.new(0,240,0,164), "Off", Enum.Font.SourceSansBold, 14, Color3.fromRGB(90,90,90)
espToggle.TextColor3, espToggle.Parent = Color3.fromRGB(240,240,240), mainFrame

-- Studio Warning
local studioWarning = Instance.new("TextLabel")
studioWarning.Size, studioWarning.Position, studioWarning.Text, studioWarning.TextColor3, studioWarning.Font, studioWarning.TextSize, studioWarning.TextXAlignment = UDim2.new(1,-16,0,18), UDim2.new(0,8,1,-28), IS_STUDIO and "Rodando no Studio" or "Aviso: Infinite Jump só funciona no Studio para segurança.", Color3.fromRGB(200,200,120), Enum.Font.SourceSansItalic, 12, Enum.TextXAlignment.Left
studioWarning.BackgroundTransparency = 1
studioWarning.Parent = mainFrame

-- ========== Funções UI ==========
local function setFOV(percent)
    percent = math.clamp(percent,0,1)
    local value = 10 + (120-10)*percent
    camera.FieldOfView = value
    fovLabel.Text = "FOV: "..tostring(math.floor(value))
    sliderFill.Size = UDim2.new(percent,0,1,0)
    sliderKnob.Position = UDim2.new(percent,0,0.5,-9)
end

local function getPercentFromX(absX)
    local pos, size = sliderTrack.AbsolutePosition.X, sliderTrack.AbsoluteSize.X
    return math.clamp((absX-pos)/size,0,1)
end

addConn(sliderKnob.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging=false end
        end)
    end
end))

addConn(UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType==Enum.UserInputType.MouseMovement then
        setFOV(getPercentFromX(input.Position.X))
    end
end))

addConn(UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType==Enum.UserInputType.MouseButton1 then dragging=false end
end))

-- Infinite Jump Toggle
addConn(ijToggle.MouseButton1Click:Connect(function()
    if not IS_STUDIO then
        ijToggle.Text, ijToggle.BackgroundColor3, infiniteJumpEnabled = "Off", Color3.fromRGB(90,90,90), false
        studioWarning.Text = "Aviso: Infinite Jump só funciona no Studio para segurança."
        return
    end
    infiniteJumpEnabled = not infiniteJumpEnabled
    ijToggle.Text = infiniteJumpEnabled and "On" or "Off"
    ijToggle.BackgroundColor3 = infiniteJumpEnabled and Color3.fromRGB(80,160,80) or Color3.fromRGB(90,90,90)
end))

addConn(UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        local char = player.Character
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        if hum and hum.Health>0 then pcall(function() hum:ChangeState(Enum.HumanoidStateType.Jumping) end) end
    end
end))

-- Highlight Toggle
addConn(hlToggle.MouseButton1Click:Connect(function()
    highlightsEnabled = not highlightsEnabled
    hlToggle.Text = highlightsEnabled and "On" or "Off"
    hlToggle.BackgroundColor3 = highlightsEnabled and Color3.fromRGB(80,160,80) or Color3.fromRGB(90,90,90)
    if highlightsEnabled then
        refreshTaggedHighlights()
        addConn(CollectionService:GetInstanceAddedSignal("DebugHighlight"):Connect(createHighlightForTag))
        addConn(CollectionService:GetInstanceRemovedSignal("DebugHighlight"):Connect(removeHighlightForTag))
    else
        for inst,_ in pairs(tagHighlightMap) do removeHighlight(inst, tagHighlightMap) end
    end
end))

-- ESP Toggle
addConn(espToggle.MouseButton1Click:Connect(function()
    espEnabled = not espEnabled
    espToggle.Text = espEnabled and "On" or "Off"
    espToggle.BackgroundColor3 = espEnabled and Color3.fromRGB(80,160,80) or Color3.fromRGB(90,90,90)
    updateAllPlayerHighlights()
end))

-- TeamCheck Toggle
local function toggleTeamCheck()
    teamCheckEnabled = not teamCheckEnabled
    teamCheckLabel.Text = "TeamCheck: "..(teamCheckEnabled and "On" or "Off")
    updateAllPlayerHighlights()
end
addConn(teamCheckLabel.MouseButton1Click:Connect(toggleTeamCheck))
addConn(teamCheckLabel.InputBegan:Connect(function(input) if input.UserInputType==Enum.UserInputType.MouseButton1 then toggleTeamCheck() end end))

-- Player listeners
addConn(Players.PlayerAdded:Connect(function(plr)
    addConn(plr:GetPropertyChangedSignal("Team"):Connect(function() onPlayerTeamChanged(plr) end))
    addConn(plr.CharacterAdded:Connect(function() wait(0.1) if espEnabled and shouldShowPlayer(plr) then createOrUpdatePlayerHighlight(plr) end end))
end))

addConn(Players.PlayerRemoving:Connect(removeHighlight))

-- loop de atualização leve
local runLoop = true
spawn(function()
    while runLoop do
        if espEnabled then updateAllPlayerHighlights() end
        if highlightsEnabled then refreshTaggedHighlights() end
        wait(0.25)
    end
end)

-- Cleanup
local function cleanup()
    runLoop=false
    pcall(function() if camera then camera.FieldOfView = originalFOV end end)
    for _,con in ipairs(connections) do if con and typeof(con)=="RBXScriptConnection" then pcall(function() con:Disconnect() end) end end
    for inst,_ in pairs(tagHighlightMap) do removeHighlight(inst, tagHighlightMap) end
    for plr,_ in pairs(playerHighlightMap) do removeHighlight(plr, playerHighlightMap) end
    if screenGui and screenGui.Parent then pcall(function() screenGui:Destroy() end) end
end
addConn(closeBtn.MouseButton1Click:Connect(cleanup))
addConn(player.AncestryChanged:Connect(function() if not player:IsDescendantOf(game) then cleanup() end end))

print("[DebugCustomUI] Interface carregada. ESP e Infinite Jump limitados ao Studio.")
if not IS_STUDIO then print("[DebugCustomUI] Aviso: rodando fora do Studio — Infinite Jump desabilitado.") end
