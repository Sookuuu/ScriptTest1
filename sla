-- Debug ESP UI (apenas para uso em seus próprios jogos - desenvolvimento/testes)
-- Coloque este LocalScript em StarterPlayerScripts

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- Config iniciais
local config = {
    espEnabled = true,
    teamCheck = true,       -- se true, só mostra jogadores de time diferente
    showDistance = true,
    updateRate = 0.1,       -- segundos entre atualizações (economia de performance)
}

-- estado interno
local running = true
local gui
local trackedMarkers = {}  -- [player] = {billboard, connection}
local lastUpdate = 0

-- helper para criar UI
local function createGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "DebugESP_UI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local main = Instance.new("Frame")
    main.Name = "Main"
    main.Size = UDim2.new(0, 260, 0, 140)
    main.Position = UDim2.new(0, 10, 0, 10)
    main.BackgroundTransparency = 0.15
    main.BackgroundColor3 = Color3.fromRGB(20,20,20)
    main.BorderSizePixel = 0
    main.AnchorPoint = Vector2.new(0,0)
    main.Parent = screenGui

    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -10, 0, 26)
    title.Position = UDim2.new(0, 5, 0, 5)
    title.BackgroundTransparency = 1
    title.Text = "Debug Visualizer"
    title.Font = Enum.Font.SourceSansBold
    title.TextSize = 18
    title.TextColor3 = Color3.new(1,1,1)
    title.Parent = main

    -- ESP Toggle
    local btnEsp = Instance.new("TextButton")
    btnEsp.Name = "ToggleESP"
    btnEsp.Size = UDim2.new(0, 120, 0, 30)
    btnEsp.Position = UDim2.new(0, 5, 0, 40)
    btnEsp.Text = config.espEnabled and "ESP: ON" or "ESP: OFF"
    btnEsp.Font = Enum.Font.SourceSans
    btnEsp.TextSize = 16
    btnEsp.Parent = main

    -- TeamCheck Toggle
    local btnTeam = Instance.new("TextButton")
    btnTeam.Name = "ToggleTeam"
    btnTeam.Size = UDim2.new(0, 120, 0, 30)
    btnTeam.Position = UDim2.new(0, 135, 0, 40)
    btnTeam.Text = config.teamCheck and "TeamCheck: ON" or "TeamCheck: OFF"
    btnTeam.Font = Enum.Font.SourceSans
    btnTeam.TextSize = 16
    btnTeam.Parent = main

    -- Close Button (fecha tudo e para o script)
    local btnClose = Instance.new("TextButton")
    btnClose.Name = "CloseAll"
    btnClose.Size = UDim2.new(1, -10, 0, 32)
    btnClose.Position = UDim2.new(0, 5, 0, 85)
    btnClose.Text = "Fechar (para tudo)"
    btnClose.Font = Enum.Font.SourceSansBold
    btnClose.TextSize = 16
    btnClose.BackgroundColor3 = Color3.fromRGB(180,50,50)
    btnClose.TextColor3 = Color3.new(1,1,1)
    btnClose.Parent = main

    -- eventos UI
    btnEsp.MouseButton1Click:Connect(function()
        config.espEnabled = not config.espEnabled
        btnEsp.Text = config.espEnabled and "ESP: ON" or "ESP: OFF"
        if not config.espEnabled then
            -- remover todas as marcas temporariamente
            for p, data in pairs(trackedMarkers) do
                if data.billboard and data.billboard.Parent then
                    data.billboard:Destroy()
                end
                if data.conn then
                    data.conn:Disconnect()
                end
                trackedMarkers[p] = nil
            end
        end
    end)

    btnTeam.MouseButton1Click:Connect(function()
        config.teamCheck = not config.teamCheck
        btnTeam.Text = config.teamCheck and "TeamCheck: ON" or "TeamCheck: OFF"
    end)

    btnClose.MouseButton1Click:Connect(function()
        -- PARA TUDO
        running = false

        -- destruir marcadores
        for p, data in pairs(trackedMarkers) do
            if data.billboard and data.billboard.Parent then
                data.billboard:Destroy()
            end
            if data.conn then
                data.conn:Disconnect()
            end
            trackedMarkers[p] = nil
        end

        -- destruir GUI
        if screenGui and screenGui.Parent then
            screenGui:Destroy()
        end

        -- opcional: desconectar listeners globais (se houver)
        -- Como exemplo, nada mais fica rodando porque 'running' = false
    end)

    return screenGui
end

-- cria/retorna billboard para um personagem
local function createMarkerForCharacter(character)
    if not character then return nil end
    local head = character:FindFirstChild("Head") or character:FindFirstChildWhichIsA("BasePart")
    if not head then return nil end

    local bb = Instance.new("BillboardGui")
    bb.Name = "DebugMarker"
    bb.Adornee = head
    bb.Size = UDim2.new(0, 140, 0, 40)
    bb.StudsOffset = Vector3.new(0, 2.2, 0)
    bb.AlwaysOnTop = true
    bb.Parent = head

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 0.4
    label.BackgroundColor3 = Color3.fromRGB(0,0,0)
    label.TextColor3 = Color3.new(1,1,1)
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 14
    label.Text = ""
    label.Parent = bb

    return bb, label
end

-- atualiza (nome/distância) do marker
local function updateMarker(player, label)
    if not player or not label then return end
    local char = player.Character
    if not char then
        label.Text = ""
        return
    end
    local head = char:FindFirstChild("Head") or char:FindFirstChildWhichIsA("BasePart")
    if not head then
        label.Text = ""
        return
    end
    local txt = player.Name
    if config.showDistance and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") then
        local dist = (head.Position - LocalPlayer.Character.Head.Position).Magnitude
        txt = txt .. string.format(" (%.1f)", dist)
    end
    label.Text = txt
end

-- cria e rastreia marker para um player
local function trackPlayer(player)
    if trackedMarkers[player] then return end
    if not player.Character then return end
    local char = player.Character
    local bb, label = createMarkerForCharacter(char)
    if not bb then return end

    -- conexão para destruir quando o character for removido
    local conn
    conn = player.CharacterRemoving:Connect(function()
        if bb and bb.Parent then
            bb:Destroy()
        end
        if conn then conn:Disconnect() end
        trackedMarkers[player] = nil
    end)

    trackedMarkers[player] = {billboard = bb, label = label, conn = conn}
    updateMarker(player, label)
end

-- limpa rastreamento de jogadores que sumiram
local function cleanDeadTracks()
    for p, data in pairs(trackedMarkers) do
        if not p or not p.Parent or not p.Character then
            if data.billboard and data.billboard.Parent then data.billboard:Destroy() end
            if data.conn then data.conn:Disconnect() end
            trackedMarkers[p] = nil
        end
    end
end

-- decide se deve mostrar o jogador (team check)
local function shouldShow(player)
    if player == LocalPlayer then return false end
    if not player.Character then return false end
    if config.teamCheck and LocalPlayer.Team then
        if player.Team == LocalPlayer.Team then
            return false
        end
    end
    return true
end

-- atualizador principal
local function mainLoop()
    lastUpdate = 0
    while running do
        local dt = RunService.RenderStepped:Wait()
        lastUpdate = lastUpdate + dt
        if lastUpdate < config.updateRate then
            continue
        end
        lastUpdate = 0

        if not config.espEnabled then
            continue
        end

        -- varre jogadores
        for _, player in pairs(Players:GetPlayers()) do
            if shouldShow(player) then
                if player.Character and not trackedMarkers[player] then
                    trackPlayer(player)
                end
            else
                -- remover se estiver sendo rastreado mas não deve mostrar
                if trackedMarkers[player] then
                    local data = trackedMarkers[player]
                    if data.billboard and data.billboard.Parent then data.billboard:Destroy() end
                    if data.conn then data.conn:Disconnect() end
                    trackedMarkers[player] = nil
                end
            end
        end

        -- atualizar textos das marcas
        for p, data in pairs(trackedMarkers) do
            if data and data.label then
                updateMarker(p, data.label)
            end
        end

        cleanDeadTracks()
    end
end

-- criar GUI e iniciar
gui = createGui()
spawn(mainLoop)

-- limpeza se o jogador sair
Players.PlayerRemoving:Connect(function(plr)
    if trackedMarkers[plr] then
        if trackedMarkers[plr].billboard and trackedMarkers[plr].billboard.Parent then
            trackedMarkers[plr].billboard:Destroy()
        end
        if trackedMarkers[plr].conn then trackedMarkers[plr].conn:Disconnect() end
        trackedMarkers[plr] = nil
    end
end)
